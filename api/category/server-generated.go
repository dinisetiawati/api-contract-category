// Package category provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package category

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CategoryDataResponse defines model for CategoryDataResponse.
type CategoryDataResponse struct {
	CategoryCode  *int                 `json:"categoryCode,omitempty"`
	CategoryEmail *openapi_types.Email `json:"categoryEmail,omitempty"`
	CategoryGroup *string              `json:"categoryGroup,omitempty"`
	CategoryName  *string              `json:"categoryName,omitempty"`
	CreatedAt     *time.Time           `json:"created_at,omitempty"`
	DeletedAt     *time.Time           `json:"deleted_at,omitempty"`
	Id            *int                 `json:"id,omitempty"`
	UpdatedAt     *time.Time           `json:"updated_at,omitempty"`
}

// CreateCategoryRequest defines model for CreateCategoryRequest.
type CreateCategoryRequest struct {
	CategoryCode  int                 `json:"categoryCode"`
	CategoryEmail openapi_types.Email `json:"categoryEmail"`
	CategoryGroup string              `json:"categoryGroup"`
	CategoryName  string              `json:"categoryName"`

	// CreatedAt The date that the user was created.
	CreatedAt time.Time `json:"created_at"`
}

// PostResponse defines model for PostResponse.
type PostResponse struct {
	Id      *string `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// UpdateCategoryData defines model for UpdateCategoryData.
type UpdateCategoryData struct {
	CategoryCode  *string `json:"categoryCode,omitempty"`
	CategoryEmail *string `json:"categoryEmail,omitempty"`
	CategoryGroup *string `json:"categoryGroup,omitempty"`
	CategoryName  *string `json:"categoryName,omitempty"`
	CreatedAt     *string `json:"created_at,omitempty"`
	DeletedAt     *string `json:"deleted_at,omitempty"`
	Id            *string `json:"id,omitempty"`
	UpdatedAt     *string `json:"updated_at,omitempty"`
}

// PostCategoryJSONRequestBody defines body for PostCategory for application/json ContentType.
type PostCategoryJSONRequestBody = CreateCategoryRequest

// PutCategoryIdJSONRequestBody defines body for PutCategoryId for application/json ContentType.
type PutCategoryIdJSONRequestBody = UpdateCategoryData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Your GET endpoint
	// (GET /categories)
	GetMemos(w http.ResponseWriter, r *http.Request)
	// Create New User
	// (POST /category)
	PostCategory(w http.ResponseWriter, r *http.Request)
	// Your GET endpoint
	// (GET /category/{id})
	GetCategoryId(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /category/{id})
	PutCategoryId(w http.ResponseWriter, r *http.Request, id string)
	// Your GET endpoint
	// (GET /healthz)
	GetHealthz(w http.ResponseWriter, r *http.Request)
	// Your GET endpoint
	// (GET /readiness)
	GetReadiness(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetMemos operation middleware
func (siw *ServerInterfaceWrapper) GetMemos(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMemos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCategory operation middleware
func (siw *ServerInterfaceWrapper) PostCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCategory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCategoryId operation middleware
func (siw *ServerInterfaceWrapper) GetCategoryId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCategoryId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutCategoryId operation middleware
func (siw *ServerInterfaceWrapper) PutCategoryId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutCategoryId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthz(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetReadiness(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReadiness(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/categories", wrapper.GetMemos).Methods("GET")

	r.HandleFunc(options.BaseURL+"/category", wrapper.PostCategory).Methods("POST")

	r.HandleFunc(options.BaseURL+"/category/{id}", wrapper.GetCategoryId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/category/{id}", wrapper.PutCategoryId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/healthz", wrapper.GetHealthz).Methods("GET")

	r.HandleFunc(options.BaseURL+"/readiness", wrapper.GetReadiness).Methods("GET")

	return r
}
